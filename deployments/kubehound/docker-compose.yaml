version: "3.7"
name: kubehound-testing
services:
  mongodb:
    image: mongo:6.0.6
    restart: unless-stopped
    profiles: ["infra"]
    container_name: ${COMPOSE_PROJECT_NAME}-storedb
    ports:
      - "127.0.0.1:27017:27017"
    networks:
      - kubenet
    depends_on:
      janusgraph:
        condition: service_healthy
    labels:
      com.datadoghq.ad.logs: '[{"app": "mongodb", "service": "kubehound"}]'

  janusgraph:
    build: ./janusgraph/
    restart: unless-stopped
    profiles: ["infra"]
    container_name: ${COMPOSE_PROJECT_NAME}-graphdb
    ports:
      - "127.0.0.1:8182:8182"
    networks:
      - kubenet
    environment:
      # Enforce strict schema constrains as per https://docs.janusgraph.org/configs/configuration-reference/#schema
      - janusgraph.schema.constraints=true
      - janusgraph.schema.default=none
      # Bump content length of web-socket buffer to enable bulk insert queries
      - gremlinserver.maxContentLength=2097152
      # Bump evaluation timeout to support our large datasets
      - gremlinserver.evaluationTimeout=60000
    healthcheck:
      # Healthcheck parameters optimized to ensure fast system tests. DO NOT USE IN PRODUCTION!
      test: ["CMD", "/opt/janusgraph/bin/gremlin.sh", "-e", "/opt/janusgraph/scripts/health-check.groovy"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s
    labels:
      com.datadoghq.ad.logs: '[{"app": "janusgraph", "service": "kubehound"}]'
      #com.datadoghq.ad.logs: '[{"app": "janusgraph", "service": "kubehound","log_processing_rules": [{"type": "multi_line","name": "log_start_with_date","pattern" : "\d{2}:\d{2}:\d{2}"}]}]'
      # com.datadoghq.ad.logs: >
      #   '[{
      #     "app": "janusgraph",
      #     "service": "kubehound",
      #   }]'
      # com.datadoghq.ad.logs: >-
      #   [{
      #     "source": "janusgraph",
      #     "service": "kubehound",
      #     "log_processing_rules": [{"type": "multi_line","name": "log_start_with_date","pattern" : "\d{2}:\d{2}:\d{2}"}]
      #   }] 

networks:
  kubenet: