// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/DataDog/KubeHound/pkg/globals/types"
	mock "github.com/stretchr/testify/mock"
)

// NodeIngestor is an autogenerated mock type for the NodeIngestor type
type NodeIngestor struct {
	mock.Mock
}

type NodeIngestor_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeIngestor) EXPECT() *NodeIngestor_Expecter {
	return &NodeIngestor_Expecter{mock: &_m.Mock}
}

// Complete provides a mock function with given fields: _a0
func (_m *NodeIngestor) Complete(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeIngestor_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type NodeIngestor_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *NodeIngestor_Expecter) Complete(_a0 interface{}) *NodeIngestor_Complete_Call {
	return &NodeIngestor_Complete_Call{Call: _e.mock.On("Complete", _a0)}
}

func (_c *NodeIngestor_Complete_Call) Run(run func(_a0 context.Context)) *NodeIngestor_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NodeIngestor_Complete_Call) Return(_a0 error) *NodeIngestor_Complete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeIngestor_Complete_Call) RunAndReturn(run func(context.Context) error) *NodeIngestor_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// IngestNode provides a mock function with given fields: _a0, _a1
func (_m *NodeIngestor) IngestNode(_a0 context.Context, _a1 types.NodeType) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IngestNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NodeType) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeIngestor_IngestNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IngestNode'
type NodeIngestor_IngestNode_Call struct {
	*mock.Call
}

// IngestNode is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.NodeType
func (_e *NodeIngestor_Expecter) IngestNode(_a0 interface{}, _a1 interface{}) *NodeIngestor_IngestNode_Call {
	return &NodeIngestor_IngestNode_Call{Call: _e.mock.On("IngestNode", _a0, _a1)}
}

func (_c *NodeIngestor_IngestNode_Call) Run(run func(_a0 context.Context, _a1 types.NodeType)) *NodeIngestor_IngestNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeType))
	})
	return _c
}

func (_c *NodeIngestor_IngestNode_Call) Return(_a0 error) *NodeIngestor_IngestNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeIngestor_IngestNode_Call) RunAndReturn(run func(context.Context, types.NodeType) error) *NodeIngestor_IngestNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeIngestor creates a new instance of NodeIngestor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeIngestor(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeIngestor {
	mock := &NodeIngestor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
