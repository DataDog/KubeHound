// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	collector "github.com/DataDog/KubeHound/pkg/collector"

	mock "github.com/stretchr/testify/mock"
)

// CollectorClient is an autogenerated mock type for the CollectorClient type
type CollectorClient struct {
	mock.Mock
}

type CollectorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectorClient) EXPECT() *CollectorClient_Expecter {
	return &CollectorClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *CollectorClient) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type CollectorClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CollectorClient_Expecter) Close(ctx interface{}) *CollectorClient_Close_Call {
	return &CollectorClient_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *CollectorClient_Close_Call) Run(run func(ctx context.Context)) *CollectorClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CollectorClient_Close_Call) Return(_a0 error) *CollectorClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_Close_Call) RunAndReturn(run func(context.Context) error) *CollectorClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *CollectorClient) HealthCheck(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectorClient_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type CollectorClient_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CollectorClient_Expecter) HealthCheck(ctx interface{}) *CollectorClient_HealthCheck_Call {
	return &CollectorClient_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *CollectorClient_HealthCheck_Call) Run(run func(ctx context.Context)) *CollectorClient_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CollectorClient_HealthCheck_Call) Return(_a0 bool, _a1 error) *CollectorClient_HealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CollectorClient_HealthCheck_Call) RunAndReturn(run func(context.Context) (bool, error)) *CollectorClient_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *CollectorClient) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CollectorClient_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type CollectorClient_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *CollectorClient_Expecter) Name() *CollectorClient_Name_Call {
	return &CollectorClient_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *CollectorClient_Name_Call) Run(run func()) *CollectorClient_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollectorClient_Name_Call) Return(_a0 string) *CollectorClient_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_Name_Call) RunAndReturn(run func() string) *CollectorClient_Name_Call {
	_c.Call.Return(run)
	return _c
}

// StreamClusterRoleBindings provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamClusterRoleBindings(ctx context.Context, ingestor collector.ClusterRoleBindingIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.ClusterRoleBindingIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamClusterRoleBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamClusterRoleBindings'
type CollectorClient_StreamClusterRoleBindings_Call struct {
	*mock.Call
}

// StreamClusterRoleBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.ClusterRoleBindingIngestor
func (_e *CollectorClient_Expecter) StreamClusterRoleBindings(ctx interface{}, ingestor interface{}) *CollectorClient_StreamClusterRoleBindings_Call {
	return &CollectorClient_StreamClusterRoleBindings_Call{Call: _e.mock.On("StreamClusterRoleBindings", ctx, ingestor)}
}

func (_c *CollectorClient_StreamClusterRoleBindings_Call) Run(run func(ctx context.Context, ingestor collector.ClusterRoleBindingIngestor)) *CollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.ClusterRoleBindingIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamClusterRoleBindings_Call) Return(_a0 error) *CollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamClusterRoleBindings_Call) RunAndReturn(run func(context.Context, collector.ClusterRoleBindingIngestor) error) *CollectorClient_StreamClusterRoleBindings_Call {
	_c.Call.Return(run)
	return _c
}

// StreamClusterRoles provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamClusterRoles(ctx context.Context, ingestor collector.ClusterRoleIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.ClusterRoleIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamClusterRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamClusterRoles'
type CollectorClient_StreamClusterRoles_Call struct {
	*mock.Call
}

// StreamClusterRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.ClusterRoleIngestor
func (_e *CollectorClient_Expecter) StreamClusterRoles(ctx interface{}, ingestor interface{}) *CollectorClient_StreamClusterRoles_Call {
	return &CollectorClient_StreamClusterRoles_Call{Call: _e.mock.On("StreamClusterRoles", ctx, ingestor)}
}

func (_c *CollectorClient_StreamClusterRoles_Call) Run(run func(ctx context.Context, ingestor collector.ClusterRoleIngestor)) *CollectorClient_StreamClusterRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.ClusterRoleIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamClusterRoles_Call) Return(_a0 error) *CollectorClient_StreamClusterRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamClusterRoles_Call) RunAndReturn(run func(context.Context, collector.ClusterRoleIngestor) error) *CollectorClient_StreamClusterRoles_Call {
	_c.Call.Return(run)
	return _c
}

// StreamEndpoints provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamEndpoints(ctx context.Context, ingestor collector.EndpointIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.EndpointIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamEndpoints'
type CollectorClient_StreamEndpoints_Call struct {
	*mock.Call
}

// StreamEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.EndpointIngestor
func (_e *CollectorClient_Expecter) StreamEndpoints(ctx interface{}, ingestor interface{}) *CollectorClient_StreamEndpoints_Call {
	return &CollectorClient_StreamEndpoints_Call{Call: _e.mock.On("StreamEndpoints", ctx, ingestor)}
}

func (_c *CollectorClient_StreamEndpoints_Call) Run(run func(ctx context.Context, ingestor collector.EndpointIngestor)) *CollectorClient_StreamEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.EndpointIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamEndpoints_Call) Return(_a0 error) *CollectorClient_StreamEndpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamEndpoints_Call) RunAndReturn(run func(context.Context, collector.EndpointIngestor) error) *CollectorClient_StreamEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// StreamNodes provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamNodes(ctx context.Context, ingestor collector.NodeIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.NodeIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamNodes'
type CollectorClient_StreamNodes_Call struct {
	*mock.Call
}

// StreamNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.NodeIngestor
func (_e *CollectorClient_Expecter) StreamNodes(ctx interface{}, ingestor interface{}) *CollectorClient_StreamNodes_Call {
	return &CollectorClient_StreamNodes_Call{Call: _e.mock.On("StreamNodes", ctx, ingestor)}
}

func (_c *CollectorClient_StreamNodes_Call) Run(run func(ctx context.Context, ingestor collector.NodeIngestor)) *CollectorClient_StreamNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.NodeIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamNodes_Call) Return(_a0 error) *CollectorClient_StreamNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamNodes_Call) RunAndReturn(run func(context.Context, collector.NodeIngestor) error) *CollectorClient_StreamNodes_Call {
	_c.Call.Return(run)
	return _c
}

// StreamPods provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamPods(ctx context.Context, ingestor collector.PodIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.PodIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamPods'
type CollectorClient_StreamPods_Call struct {
	*mock.Call
}

// StreamPods is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.PodIngestor
func (_e *CollectorClient_Expecter) StreamPods(ctx interface{}, ingestor interface{}) *CollectorClient_StreamPods_Call {
	return &CollectorClient_StreamPods_Call{Call: _e.mock.On("StreamPods", ctx, ingestor)}
}

func (_c *CollectorClient_StreamPods_Call) Run(run func(ctx context.Context, ingestor collector.PodIngestor)) *CollectorClient_StreamPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.PodIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamPods_Call) Return(_a0 error) *CollectorClient_StreamPods_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamPods_Call) RunAndReturn(run func(context.Context, collector.PodIngestor) error) *CollectorClient_StreamPods_Call {
	_c.Call.Return(run)
	return _c
}

// StreamRoleBindings provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamRoleBindings(ctx context.Context, ingestor collector.RoleBindingIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.RoleBindingIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamRoleBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamRoleBindings'
type CollectorClient_StreamRoleBindings_Call struct {
	*mock.Call
}

// StreamRoleBindings is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.RoleBindingIngestor
func (_e *CollectorClient_Expecter) StreamRoleBindings(ctx interface{}, ingestor interface{}) *CollectorClient_StreamRoleBindings_Call {
	return &CollectorClient_StreamRoleBindings_Call{Call: _e.mock.On("StreamRoleBindings", ctx, ingestor)}
}

func (_c *CollectorClient_StreamRoleBindings_Call) Run(run func(ctx context.Context, ingestor collector.RoleBindingIngestor)) *CollectorClient_StreamRoleBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.RoleBindingIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamRoleBindings_Call) Return(_a0 error) *CollectorClient_StreamRoleBindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamRoleBindings_Call) RunAndReturn(run func(context.Context, collector.RoleBindingIngestor) error) *CollectorClient_StreamRoleBindings_Call {
	_c.Call.Return(run)
	return _c
}

// StreamRoles provides a mock function with given fields: ctx, ingestor
func (_m *CollectorClient) StreamRoles(ctx context.Context, ingestor collector.RoleIngestor) error {
	ret := _m.Called(ctx, ingestor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, collector.RoleIngestor) error); ok {
		r0 = rf(ctx, ingestor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectorClient_StreamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamRoles'
type CollectorClient_StreamRoles_Call struct {
	*mock.Call
}

// StreamRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - ingestor collector.RoleIngestor
func (_e *CollectorClient_Expecter) StreamRoles(ctx interface{}, ingestor interface{}) *CollectorClient_StreamRoles_Call {
	return &CollectorClient_StreamRoles_Call{Call: _e.mock.On("StreamRoles", ctx, ingestor)}
}

func (_c *CollectorClient_StreamRoles_Call) Run(run func(ctx context.Context, ingestor collector.RoleIngestor)) *CollectorClient_StreamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(collector.RoleIngestor))
	})
	return _c
}

func (_c *CollectorClient_StreamRoles_Call) Return(_a0 error) *CollectorClient_StreamRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectorClient_StreamRoles_Call) RunAndReturn(run func(context.Context, collector.RoleIngestor) error) *CollectorClient_StreamRoles_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCollectorClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectorClient creates a new instance of CollectorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectorClient(t mockConstructorTestingTNewCollectorClient) *CollectorClient {
	mock := &CollectorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
