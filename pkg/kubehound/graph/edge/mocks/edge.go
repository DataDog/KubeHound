// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	config "github.com/DataDog/KubeHound/pkg/config"
	cache "github.com/DataDog/KubeHound/pkg/kubehound/storage/cache"

	context "context"

	converter "github.com/DataDog/KubeHound/pkg/kubehound/models/converter"

	edge "github.com/DataDog/KubeHound/pkg/kubehound/graph/edge"

	mock "github.com/stretchr/testify/mock"

	storedb "github.com/DataDog/KubeHound/pkg/kubehound/storage/storedb"

	types "github.com/DataDog/KubeHound/pkg/kubehound/graph/types"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

type Builder_Expecter struct {
	mock *mock.Mock
}

func (_m *Builder) EXPECT() *Builder_Expecter {
	return &Builder_Expecter{mock: &_m.Mock}
}

// AttckTacticID provides a mock function with no fields
func (_m *Builder) AttckTacticID() edge.AttckTacticID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AttckTacticID")
	}

	var r0 edge.AttckTacticID
	if rf, ok := ret.Get(0).(func() edge.AttckTacticID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(edge.AttckTacticID)
	}

	return r0
}

// Builder_AttckTacticID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttckTacticID'
type Builder_AttckTacticID_Call struct {
	*mock.Call
}

// AttckTacticID is a helper method to define mock.On call
func (_e *Builder_Expecter) AttckTacticID() *Builder_AttckTacticID_Call {
	return &Builder_AttckTacticID_Call{Call: _e.mock.On("AttckTacticID")}
}

func (_c *Builder_AttckTacticID_Call) Run(run func()) *Builder_AttckTacticID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_AttckTacticID_Call) Return(_a0 edge.AttckTacticID) *Builder_AttckTacticID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_AttckTacticID_Call) RunAndReturn(run func() edge.AttckTacticID) *Builder_AttckTacticID_Call {
	_c.Call.Return(run)
	return _c
}

// AttckTechniqueID provides a mock function with no fields
func (_m *Builder) AttckTechniqueID() edge.AttckTechniqueID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AttckTechniqueID")
	}

	var r0 edge.AttckTechniqueID
	if rf, ok := ret.Get(0).(func() edge.AttckTechniqueID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(edge.AttckTechniqueID)
	}

	return r0
}

// Builder_AttckTechniqueID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttckTechniqueID'
type Builder_AttckTechniqueID_Call struct {
	*mock.Call
}

// AttckTechniqueID is a helper method to define mock.On call
func (_e *Builder_Expecter) AttckTechniqueID() *Builder_AttckTechniqueID_Call {
	return &Builder_AttckTechniqueID_Call{Call: _e.mock.On("AttckTechniqueID")}
}

func (_c *Builder_AttckTechniqueID_Call) Run(run func()) *Builder_AttckTechniqueID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_AttckTechniqueID_Call) Return(_a0 edge.AttckTechniqueID) *Builder_AttckTechniqueID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_AttckTechniqueID_Call) RunAndReturn(run func() edge.AttckTechniqueID) *Builder_AttckTechniqueID_Call {
	_c.Call.Return(run)
	return _c
}

// BatchSize provides a mock function with no fields
func (_m *Builder) BatchSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BatchSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Builder_BatchSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchSize'
type Builder_BatchSize_Call struct {
	*mock.Call
}

// BatchSize is a helper method to define mock.On call
func (_e *Builder_Expecter) BatchSize() *Builder_BatchSize_Call {
	return &Builder_BatchSize_Call{Call: _e.mock.On("BatchSize")}
}

func (_c *Builder_BatchSize_Call) Run(run func()) *Builder_BatchSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_BatchSize_Call) Return(_a0 int) *Builder_BatchSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_BatchSize_Call) RunAndReturn(run func() int) *Builder_BatchSize_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: cfg, runtime
func (_m *Builder) Initialize(cfg *config.EdgeBuilderConfig, runtime *config.DynamicConfig) error {
	ret := _m.Called(cfg, runtime)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.EdgeBuilderConfig, *config.DynamicConfig) error); ok {
		r0 = rf(cfg, runtime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type Builder_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - cfg *config.EdgeBuilderConfig
//   - runtime *config.DynamicConfig
func (_e *Builder_Expecter) Initialize(cfg interface{}, runtime interface{}) *Builder_Initialize_Call {
	return &Builder_Initialize_Call{Call: _e.mock.On("Initialize", cfg, runtime)}
}

func (_c *Builder_Initialize_Call) Run(run func(cfg *config.EdgeBuilderConfig, runtime *config.DynamicConfig)) *Builder_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.EdgeBuilderConfig), args[1].(*config.DynamicConfig))
	})
	return _c
}

func (_c *Builder_Initialize_Call) Return(_a0 error) *Builder_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Initialize_Call) RunAndReturn(run func(*config.EdgeBuilderConfig, *config.DynamicConfig) error) *Builder_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Label provides a mock function with no fields
func (_m *Builder) Label() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Label")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Builder_Label_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Label'
type Builder_Label_Call struct {
	*mock.Call
}

// Label is a helper method to define mock.On call
func (_e *Builder_Expecter) Label() *Builder_Label_Call {
	return &Builder_Label_Call{Call: _e.mock.On("Label")}
}

func (_c *Builder_Label_Call) Run(run func()) *Builder_Label_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Label_Call) Return(_a0 string) *Builder_Label_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Label_Call) RunAndReturn(run func() string) *Builder_Label_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Builder) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Builder_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Builder_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Builder_Expecter) Name() *Builder_Name_Call {
	return &Builder_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Builder_Name_Call) Run(run func()) *Builder_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Name_Call) Return(_a0 string) *Builder_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Name_Call) RunAndReturn(run func() string) *Builder_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Processor provides a mock function with given fields: _a0, _a1, _a2
func (_m *Builder) Processor(_a0 context.Context, _a1 *converter.ObjectIDConverter, _a2 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Processor")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *converter.ObjectIDConverter, interface{}) (interface{}, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *converter.ObjectIDConverter, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *converter.ObjectIDConverter, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Builder_Processor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Processor'
type Builder_Processor_Call struct {
	*mock.Call
}

// Processor is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *converter.ObjectIDConverter
//   - _a2 interface{}
func (_e *Builder_Expecter) Processor(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Builder_Processor_Call {
	return &Builder_Processor_Call{Call: _e.mock.On("Processor", _a0, _a1, _a2)}
}

func (_c *Builder_Processor_Call) Run(run func(_a0 context.Context, _a1 *converter.ObjectIDConverter, _a2 interface{})) *Builder_Processor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*converter.ObjectIDConverter), args[2].(interface{}))
	})
	return _c
}

func (_c *Builder_Processor_Call) Return(_a0 interface{}, _a1 error) *Builder_Processor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Builder_Processor_Call) RunAndReturn(run func(context.Context, *converter.ObjectIDConverter, interface{}) (interface{}, error)) *Builder_Processor_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, store, _a2, process, complete
func (_m *Builder) Stream(ctx context.Context, store storedb.Provider, _a2 cache.CacheReader, process types.ProcessEntryCallback, complete types.CompleteQueryCallback) error {
	ret := _m.Called(ctx, store, _a2, process, complete)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storedb.Provider, cache.CacheReader, types.ProcessEntryCallback, types.CompleteQueryCallback) error); ok {
		r0 = rf(ctx, store, _a2, process, complete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Builder_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type Builder_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - store storedb.Provider
//   - _a2 cache.CacheReader
//   - process types.ProcessEntryCallback
//   - complete types.CompleteQueryCallback
func (_e *Builder_Expecter) Stream(ctx interface{}, store interface{}, _a2 interface{}, process interface{}, complete interface{}) *Builder_Stream_Call {
	return &Builder_Stream_Call{Call: _e.mock.On("Stream", ctx, store, _a2, process, complete)}
}

func (_c *Builder_Stream_Call) Run(run func(ctx context.Context, store storedb.Provider, _a2 cache.CacheReader, process types.ProcessEntryCallback, complete types.CompleteQueryCallback)) *Builder_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storedb.Provider), args[2].(cache.CacheReader), args[3].(types.ProcessEntryCallback), args[4].(types.CompleteQueryCallback))
	})
	return _c
}

func (_c *Builder_Stream_Call) Return(_a0 error) *Builder_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Stream_Call) RunAndReturn(run func(context.Context, storedb.Provider, cache.CacheReader, types.ProcessEntryCallback, types.CompleteQueryCallback) error) *Builder_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// Traversal provides a mock function with no fields
func (_m *Builder) Traversal() types.EdgeTraversal {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Traversal")
	}

	var r0 types.EdgeTraversal
	if rf, ok := ret.Get(0).(func() types.EdgeTraversal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.EdgeTraversal)
		}
	}

	return r0
}

// Builder_Traversal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Traversal'
type Builder_Traversal_Call struct {
	*mock.Call
}

// Traversal is a helper method to define mock.On call
func (_e *Builder_Expecter) Traversal() *Builder_Traversal_Call {
	return &Builder_Traversal_Call{Call: _e.mock.On("Traversal")}
}

func (_c *Builder_Traversal_Call) Run(run func()) *Builder_Traversal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Builder_Traversal_Call) Return(_a0 types.EdgeTraversal) *Builder_Traversal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Builder_Traversal_Call) RunAndReturn(run func() types.EdgeTraversal) *Builder_Traversal_Call {
	_c.Call.Return(run)
	return _c
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
