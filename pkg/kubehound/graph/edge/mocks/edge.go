// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	edge "github.com/DataDog/KubeHound/pkg/kubehound/graph/edge"
	mock "github.com/stretchr/testify/mock"

	storedb "github.com/DataDog/KubeHound/pkg/kubehound/storage/storedb"
)

// Edge is an autogenerated mock type for the Edge type
type Edge struct {
	mock.Mock
}

type Edge_Expecter struct {
	mock *mock.Mock
}

func (_m *Edge) EXPECT() *Edge_Expecter {
	return &Edge_Expecter{mock: &_m.Mock}
}

// Label provides a mock function with given fields:
func (_m *Edge) Label() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Edge_Label_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Label'
type Edge_Label_Call struct {
	*mock.Call
}

// Label is a helper method to define mock.On call
func (_e *Edge_Expecter) Label() *Edge_Label_Call {
	return &Edge_Label_Call{Call: _e.mock.On("Label")}
}

func (_c *Edge_Label_Call) Run(run func()) *Edge_Label_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Edge_Label_Call) Return(_a0 string) *Edge_Label_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Edge_Label_Call) RunAndReturn(run func() string) *Edge_Label_Call {
	_c.Call.Return(run)
	return _c
}

// Processor provides a mock function with given fields: ctx, model
func (_m *Edge) Processor(ctx context.Context, model edge.DataContainer) (edge.TraversalInput, error) {
	ret := _m.Called(ctx, model)

	var r0 edge.TraversalInput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, edge.DataContainer) (edge.TraversalInput, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, edge.DataContainer) edge.TraversalInput); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(edge.TraversalInput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, edge.DataContainer) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edge_Processor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Processor'
type Edge_Processor_Call struct {
	*mock.Call
}

// Processor is a helper method to define mock.On call
//   - ctx context.Context
//   - model edge.DataContainer
func (_e *Edge_Expecter) Processor(ctx interface{}, model interface{}) *Edge_Processor_Call {
	return &Edge_Processor_Call{Call: _e.mock.On("Processor", ctx, model)}
}

func (_c *Edge_Processor_Call) Run(run func(ctx context.Context, model edge.DataContainer)) *Edge_Processor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(edge.DataContainer))
	})
	return _c
}

func (_c *Edge_Processor_Call) Return(_a0 edge.TraversalInput, _a1 error) *Edge_Processor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Edge_Processor_Call) RunAndReturn(run func(context.Context, edge.DataContainer) (edge.TraversalInput, error)) *Edge_Processor_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: ctx, store, process, complete
func (_m *Edge) Stream(ctx context.Context, store storedb.Provider, process edge.ProcessEntryCallback, complete edge.CompleteQueryCallback) error {
	ret := _m.Called(ctx, store, process, complete)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storedb.Provider, edge.ProcessEntryCallback, edge.CompleteQueryCallback) error); ok {
		r0 = rf(ctx, store, process, complete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edge_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type Edge_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - store storedb.Provider
//   - process edge.ProcessEntryCallback
//   - complete edge.CompleteQueryCallback
func (_e *Edge_Expecter) Stream(ctx interface{}, store interface{}, process interface{}, complete interface{}) *Edge_Stream_Call {
	return &Edge_Stream_Call{Call: _e.mock.On("Stream", ctx, store, process, complete)}
}

func (_c *Edge_Stream_Call) Run(run func(ctx context.Context, store storedb.Provider, process edge.ProcessEntryCallback, complete edge.CompleteQueryCallback)) *Edge_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storedb.Provider), args[2].(edge.ProcessEntryCallback), args[3].(edge.CompleteQueryCallback))
	})
	return _c
}

func (_c *Edge_Stream_Call) Return(_a0 error) *Edge_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Edge_Stream_Call) RunAndReturn(run func(context.Context, storedb.Provider, edge.ProcessEntryCallback, edge.CompleteQueryCallback) error) *Edge_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// Traversal provides a mock function with given fields:
func (_m *Edge) Traversal() edge.EdgeTraversal {
	ret := _m.Called()

	var r0 edge.EdgeTraversal
	if rf, ok := ret.Get(0).(func() edge.EdgeTraversal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(edge.EdgeTraversal)
		}
	}

	return r0
}

// Edge_Traversal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Traversal'
type Edge_Traversal_Call struct {
	*mock.Call
}

// Traversal is a helper method to define mock.On call
func (_e *Edge_Expecter) Traversal() *Edge_Traversal_Call {
	return &Edge_Traversal_Call{Call: _e.mock.On("Traversal")}
}

func (_c *Edge_Traversal_Call) Run(run func()) *Edge_Traversal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Edge_Traversal_Call) Return(_a0 edge.EdgeTraversal) *Edge_Traversal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Edge_Traversal_Call) RunAndReturn(run func() edge.EdgeTraversal) *Edge_Traversal_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEdge interface {
	mock.TestingT
	Cleanup(func())
}

// NewEdge creates a new instance of Edge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEdge(t mockConstructorTestingTNewEdge) *Edge {
	mock := &Edge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
