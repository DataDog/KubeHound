package edge

import (
	"context"
	"fmt"

	"github.com/DataDog/KubeHound/pkg/kubehound/graph/adapter"
	"github.com/DataDog/KubeHound/pkg/kubehound/graph/types"
	"github.com/DataDog/KubeHound/pkg/kubehound/models/converter"
	"github.com/DataDog/KubeHound/pkg/kubehound/risk"
	"github.com/DataDog/KubeHound/pkg/kubehound/storage/cache"
	"github.com/DataDog/KubeHound/pkg/kubehound/storage/storedb"
	"github.com/DataDog/KubeHound/pkg/kubehound/store/collections"
	gremlin "github.com/apache/tinkerpop/gremlin-go/v3/driver"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

const (
	ClusterRoleBindLabel = "ROLE_BIND"
	ClusterRoleBindName  = "ClusterRoleBind"
)

func init() {
	Register(&ClusterRoleBind{}, RegisterDefault)
}

// @@DOCLINK: https://datadoghq.atlassian.net/wiki/spaces/ASE/pages/2889355675/ROLE+BIND
type ClusterRoleBind struct {
	BaseEdge
}

type clusterRoleBindGroup struct {
	PermissionSet primitive.ObjectID `bson:"_id" json:"permission_set"`
}

func (e *ClusterRoleBind) Label() string {
	return ClusterRoleBindLabel
}

func (e *ClusterRoleBind) Name() string {
	return ClusterRoleBindName
}

func (e *ClusterRoleBind) Processor(ctx context.Context, oic *converter.ObjectIDConverter, entry any) (any, error) {
	typed, ok := entry.(*clusterRoleBindGroup)
	if !ok {
		return nil, fmt.Errorf("invalid type passed to processor: %T", entry)
	}

	rid, err := oic.GraphID(ctx, typed.PermissionSet.Hex())
	if err != nil {
		return nil, fmt.Errorf("%s edge role id convert: %w", e.Label(), err)
	}

	return rid, nil
}

func (e *ClusterRoleBind) Traversal() types.EdgeTraversal {
	return func(source *gremlin.GraphTraversalSource, inserts []any) *gremlin.GraphTraversal {
		g := source.GetGraphTraversal()

		// Gathering all sensitives roles
		sensitiveRoles := make([]string, 0, len(risk.CriticalRoleMap))
		for k := range risk.CriticalRoleMap {
			sensitiveRoles = append(sensitiveRoles, k)
		}

		if e.cfg.LargeClusterOptimizations {
			// For larger clusters simply target specific roles to reduce number of attack paths
			g.V().
				HasLabel("PermissionSet").
				Has("isNamespaced", false).
				// Temporary measure, until we scan and flag for sensitive roles
				Has("role", P.Within(sensitiveRoles)).
				As("r").
				V(inserts...).
				Has("critical", false).
				AddE(e.Label()).
				To("r").
				Barrier().Limit(0)
		} else {
			// In smaller clusters we can still show the (large set of) attack paths generated by this attack
			g.V().
				HasLabel("PermissionSet").
				Has("isNamespaced", false).
				As("i").
				V(inserts...).
				Has("critical", false).
				AddE(e.Label()).
				To("i").
				Barrier().Limit(0)
		}

		return g
	}
}

func (e *ClusterRoleBind) Stream(ctx context.Context, store storedb.Provider, c cache.CacheReader,
	callback types.ProcessEntryCallback, complete types.CompleteQueryCallback) error {

	permissionSets := adapter.MongoDB(store).Collection(collections.PermissionSetName)
	// Handle clusterrolebindings against clusterroles
	pipeline := []bson.M{
		// $match stage
		{
			"$match": bson.M{
				"is_namespaced": false,
				"rules": bson.M{
					"$elemMatch": bson.M{
						"$or": []bson.M{
							{"apigroups": "*"},
							{"apigroups": "rbac.authorization.k8s.io"},
						},
					},
				},
				"$and": []bson.M{
					{
						"rules": bson.M{
							"$elemMatch": bson.M{
								"$and": []bson.M{
									{
										"$or": []bson.M{
											{"verbs": "create"},
											{"verbs": "*"},
										},
									},
									{
										"$or": []bson.M{
											{"resources": "clusterrolebindings"},
											{"resources": "*"},
										},
									},
									{"resourcenames": nil}, // TODO: handle resource scope
								},
							},
						},
					},
					{
						"rules": bson.M{
							"$elemMatch": bson.M{
								"$and": []bson.M{
									{
										"$or": []bson.M{
											{"verbs": "bind"},
											{"verbs": "*"},
										},
									},
									{
										"$or": []bson.M{
											{"resources": "clusterroles"},
											{"resources": "*"},
										},
									},
									{"resourcenames": nil}, // TODO: handle resource scope
								},
							},
						},
					},
				},
			},
		},
		// $project stage
		{
			"$project": bson.M{
				"_id": 1,
			},
		},
	}
	cur, err := permissionSets.Aggregate(context.Background(), pipeline)
	if err != nil {
		return err
	}
	defer cur.Close(ctx)

	return adapter.MongoCursorHandler[clusterRoleBindGroup](ctx, cur, callback, complete)
}
