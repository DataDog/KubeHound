// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	collections "github.com/DataDog/KubeHound/pkg/kubehound/store/collections"

	mock "github.com/stretchr/testify/mock"

	storedb "github.com/DataDog/KubeHound/pkg/kubehound/storage/storedb"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// BulkWriter provides a mock function with given fields: ctx, collection, opts
func (_m *Provider) BulkWriter(ctx context.Context, collection collections.Collection, opts ...storedb.WriterOption) (storedb.AsyncWriter, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 storedb.AsyncWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, collections.Collection, ...storedb.WriterOption) (storedb.AsyncWriter, error)); ok {
		return rf(ctx, collection, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, collections.Collection, ...storedb.WriterOption) storedb.AsyncWriter); ok {
		r0 = rf(ctx, collection, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storedb.AsyncWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, collections.Collection, ...storedb.WriterOption) error); ok {
		r1 = rf(ctx, collection, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_BulkWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkWriter'
type Provider_BulkWriter_Call struct {
	*mock.Call
}

// BulkWriter is a helper method to define mock.On call
//   - ctx context.Context
//   - collection collections.Collection
//   - opts ...storedb.WriterOption
func (_e *Provider_Expecter) BulkWriter(ctx interface{}, collection interface{}, opts ...interface{}) *Provider_BulkWriter_Call {
	return &Provider_BulkWriter_Call{Call: _e.mock.On("BulkWriter",
		append([]interface{}{ctx, collection}, opts...)...)}
}

func (_c *Provider_BulkWriter_Call) Run(run func(ctx context.Context, collection collections.Collection, opts ...storedb.WriterOption)) *Provider_BulkWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storedb.WriterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(storedb.WriterOption)
			}
		}
		run(args[0].(context.Context), args[1].(collections.Collection), variadicArgs...)
	})
	return _c
}

func (_c *Provider_BulkWriter_Call) Return(_a0 storedb.AsyncWriter, _a1 error) *Provider_BulkWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_BulkWriter_Call) RunAndReturn(run func(context.Context, collections.Collection, ...storedb.WriterOption) (storedb.AsyncWriter, error)) *Provider_BulkWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Clean provides a mock function with given fields: ctx, runId, cluster
func (_m *Provider) Clean(ctx context.Context, runId string, cluster string) error {
	ret := _m.Called(ctx, runId, cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, runId, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type Provider_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - ctx context.Context
//   - runId string
//   - cluster string
func (_e *Provider_Expecter) Clean(ctx interface{}, runId interface{}, cluster interface{}) *Provider_Clean_Call {
	return &Provider_Clean_Call{Call: _e.mock.On("Clean", ctx, runId, cluster)}
}

func (_c *Provider_Clean_Call) Run(run func(ctx context.Context, runId string, cluster string)) *Provider_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Provider_Clean_Call) Return(_a0 error) *Provider_Clean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Clean_Call) RunAndReturn(run func(context.Context, string, string) error) *Provider_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: ctx
func (_m *Provider) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Provider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Provider_Expecter) Close(ctx interface{}) *Provider_Close_Call {
	return &Provider_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *Provider_Close_Call) Run(run func(ctx context.Context)) *Provider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_Close_Call) Return(_a0 error) *Provider_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Close_Call) RunAndReturn(run func(context.Context) error) *Provider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *Provider) HealthCheck(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type Provider_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Provider_Expecter) HealthCheck(ctx interface{}) *Provider_HealthCheck_Call {
	return &Provider_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *Provider_HealthCheck_Call) Run(run func(ctx context.Context)) *Provider_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_HealthCheck_Call) Return(_a0 bool, _a1 error) *Provider_HealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_HealthCheck_Call) RunAndReturn(run func(context.Context) (bool, error)) *Provider_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *Provider) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Provider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Provider_Expecter) Name() *Provider_Name_Call {
	return &Provider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Provider_Name_Call) Run(run func()) *Provider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Name_Call) Return(_a0 string) *Provider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Name_Call) RunAndReturn(run func() string) *Provider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function with given fields: ctx
func (_m *Provider) Prepare(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Provider_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type Provider_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Provider_Expecter) Prepare(ctx interface{}) *Provider_Prepare_Call {
	return &Provider_Prepare_Call{Call: _e.mock.On("Prepare", ctx)}
}

func (_c *Provider_Prepare_Call) Run(run func(ctx context.Context)) *Provider_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_Prepare_Call) Return(_a0 error) *Provider_Prepare_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Prepare_Call) RunAndReturn(run func(context.Context) error) *Provider_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Reader provides a mock function with given fields:
func (_m *Provider) Reader() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Provider_Reader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reader'
type Provider_Reader_Call struct {
	*mock.Call
}

// Reader is a helper method to define mock.On call
func (_e *Provider_Expecter) Reader() *Provider_Reader_Call {
	return &Provider_Reader_Call{Call: _e.mock.On("Reader")}
}

func (_c *Provider_Reader_Call) Run(run func()) *Provider_Reader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Reader_Call) Return(_a0 interface{}) *Provider_Reader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Reader_Call) RunAndReturn(run func() interface{}) *Provider_Reader_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
