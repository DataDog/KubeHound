// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AsyncWriter is an autogenerated mock type for the AsyncWriter type
type AsyncWriter struct {
	mock.Mock
}

type AsyncWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncWriter) EXPECT() *AsyncWriter_Expecter {
	return &AsyncWriter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *AsyncWriter) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type AsyncWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AsyncWriter_Expecter) Close(ctx interface{}) *AsyncWriter_Close_Call {
	return &AsyncWriter_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *AsyncWriter_Close_Call) Run(run func(ctx context.Context)) *AsyncWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AsyncWriter_Close_Call) Return(_a0 error) *AsyncWriter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncWriter_Close_Call) RunAndReturn(run func(context.Context) error) *AsyncWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx
func (_m *AsyncWriter) Flush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncWriter_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type AsyncWriter_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AsyncWriter_Expecter) Flush(ctx interface{}) *AsyncWriter_Flush_Call {
	return &AsyncWriter_Flush_Call{Call: _e.mock.On("Flush", ctx)}
}

func (_c *AsyncWriter_Flush_Call) Run(run func(ctx context.Context)) *AsyncWriter_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AsyncWriter_Flush_Call) Return(_a0 error) *AsyncWriter_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncWriter_Flush_Call) RunAndReturn(run func(context.Context) error) *AsyncWriter_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// Queue provides a mock function with given fields: ctx, model
func (_m *AsyncWriter) Queue(ctx context.Context, model interface{}) error {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncWriter_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type AsyncWriter_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - ctx context.Context
//   - model interface{}
func (_e *AsyncWriter_Expecter) Queue(ctx interface{}, model interface{}) *AsyncWriter_Queue_Call {
	return &AsyncWriter_Queue_Call{Call: _e.mock.On("Queue", ctx, model)}
}

func (_c *AsyncWriter_Queue_Call) Run(run func(ctx context.Context, model interface{})) *AsyncWriter_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *AsyncWriter_Queue_Call) Return(_a0 error) *AsyncWriter_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncWriter_Queue_Call) RunAndReturn(run func(context.Context, interface{}) error) *AsyncWriter_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// NewAsyncWriter creates a new instance of AsyncWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAsyncWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AsyncWriter {
	mock := &AsyncWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
