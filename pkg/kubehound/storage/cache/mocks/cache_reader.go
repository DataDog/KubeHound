// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cachekey "github.com/DataDog/KubeHound/pkg/kubehound/storage/cache/cachekey"

	mock "github.com/stretchr/testify/mock"
)

// CacheReader is an autogenerated mock type for the CacheReader type
type CacheReader struct {
	mock.Mock
}

type CacheReader_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheReader) EXPECT() *CacheReader_Expecter {
	return &CacheReader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *CacheReader) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheReader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type CacheReader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheReader_Expecter) Close(ctx interface{}) *CacheReader_Close_Call {
	return &CacheReader_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *CacheReader_Close_Call) Run(run func(ctx context.Context)) *CacheReader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CacheReader_Close_Call) Return(_a0 error) *CacheReader_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheReader_Close_Call) RunAndReturn(run func(context.Context) error) *CacheReader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *CacheReader) Get(ctx context.Context, key cachekey.CacheKey) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cachekey.CacheKey) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cachekey.CacheKey) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cachekey.CacheKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheReader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CacheReader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key cachekey.CacheKey
func (_e *CacheReader_Expecter) Get(ctx interface{}, key interface{}) *CacheReader_Get_Call {
	return &CacheReader_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *CacheReader_Get_Call) Run(run func(ctx context.Context, key cachekey.CacheKey)) *CacheReader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cachekey.CacheKey))
	})
	return _c
}

func (_c *CacheReader_Get_Call) Return(_a0 string, _a1 error) *CacheReader_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheReader_Get_Call) RunAndReturn(run func(context.Context, cachekey.CacheKey) (string, error)) *CacheReader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *CacheReader) HealthCheck(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheReader_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type CacheReader_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CacheReader_Expecter) HealthCheck(ctx interface{}) *CacheReader_HealthCheck_Call {
	return &CacheReader_HealthCheck_Call{Call: _e.mock.On("HealthCheck", ctx)}
}

func (_c *CacheReader_HealthCheck_Call) Run(run func(ctx context.Context)) *CacheReader_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CacheReader_HealthCheck_Call) Return(_a0 bool, _a1 error) *CacheReader_HealthCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CacheReader_HealthCheck_Call) RunAndReturn(run func(context.Context) (bool, error)) *CacheReader_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *CacheReader) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// CacheReader_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type CacheReader_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *CacheReader_Expecter) Name() *CacheReader_Name_Call {
	return &CacheReader_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *CacheReader_Name_Call) Run(run func()) *CacheReader_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheReader_Name_Call) Return(_a0 string) *CacheReader_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CacheReader_Name_Call) RunAndReturn(run func() string) *CacheReader_Name_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCacheReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheReader creates a new instance of CacheReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheReader(t mockConstructorTestingTNewCacheReader) *CacheReader {
	mock := &CacheReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
