// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pipeline "github.com/DataDog/KubeHound/pkg/kubehound/ingestor/pipeline"
	mock "github.com/stretchr/testify/mock"
)

// ObjectIngest is an autogenerated mock type for the ObjectIngest type
type ObjectIngest struct {
	mock.Mock
}

type ObjectIngest_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectIngest) EXPECT() *ObjectIngest_Expecter {
	return &ObjectIngest_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *ObjectIngest) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectIngest_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ObjectIngest_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ObjectIngest_Expecter) Close(ctx interface{}) *ObjectIngest_Close_Call {
	return &ObjectIngest_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *ObjectIngest_Close_Call) Run(run func(ctx context.Context)) *ObjectIngest_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ObjectIngest_Close_Call) Return(_a0 error) *ObjectIngest_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectIngest_Close_Call) RunAndReturn(run func(context.Context) error) *ObjectIngest_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: ctx, deps
func (_m *ObjectIngest) Initialize(ctx context.Context, deps *pipeline.Dependencies) error {
	ret := _m.Called(ctx, deps)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *pipeline.Dependencies) error); ok {
		r0 = rf(ctx, deps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectIngest_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type ObjectIngest_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - deps *pipeline.Dependencies
func (_e *ObjectIngest_Expecter) Initialize(ctx interface{}, deps interface{}) *ObjectIngest_Initialize_Call {
	return &ObjectIngest_Initialize_Call{Call: _e.mock.On("Initialize", ctx, deps)}
}

func (_c *ObjectIngest_Initialize_Call) Run(run func(ctx context.Context, deps *pipeline.Dependencies)) *ObjectIngest_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pipeline.Dependencies))
	})
	return _c
}

func (_c *ObjectIngest_Initialize_Call) Return(_a0 error) *ObjectIngest_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectIngest_Initialize_Call) RunAndReturn(run func(context.Context, *pipeline.Dependencies) error) *ObjectIngest_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *ObjectIngest) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ObjectIngest_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ObjectIngest_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ObjectIngest_Expecter) Name() *ObjectIngest_Name_Call {
	return &ObjectIngest_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ObjectIngest_Name_Call) Run(run func()) *ObjectIngest_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ObjectIngest_Name_Call) Return(_a0 string) *ObjectIngest_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectIngest_Name_Call) RunAndReturn(run func() string) *ObjectIngest_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *ObjectIngest) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectIngest_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ObjectIngest_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ObjectIngest_Expecter) Run(ctx interface{}) *ObjectIngest_Run_Call {
	return &ObjectIngest_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *ObjectIngest_Run_Call) Run(run func(ctx context.Context)) *ObjectIngest_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ObjectIngest_Run_Call) Return(_a0 error) *ObjectIngest_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectIngest_Run_Call) RunAndReturn(run func(context.Context) error) *ObjectIngest_Run_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewObjectIngest interface {
	mock.TestingT
	Cleanup(func())
}

// NewObjectIngest creates a new instance of ObjectIngest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewObjectIngest(t mockConstructorTestingTNewObjectIngest) *ObjectIngest {
	mock := &ObjectIngest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
